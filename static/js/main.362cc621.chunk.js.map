{"version":3,"sources":["reducer.js","App.js","serviceWorker.js","index.js"],"names":["InitState","mylist","title","id","img","recommendations","removeMyList","type","addMyList","reducer","state","arguments","length","undefined","action","console","log","newList","filter","x","Object","objectSpread","addItem","concat","toConsumableArray","newRecommendations","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleRemove","e","target","parseInt","handleAdd","_this2","react_default","a","createElement","className","map","ele","src","onClick","Component","connect","dispatch","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.362cc621.chunk.js","sourcesContent":["const InitState = {\n    mylist: [\n        {\n            'title': 'Futurama',\n            'id': 1,\n            'img': 'http://cdn1.nflximg.net/webp/7621/3787621.webp'\n        },\n        {\n            'title': 'The Interview',\n            'id': 2,\n            'img': 'http://cdn1.nflximg.net/webp/1381/11971381.webp'\n        },\n        {\n            'title': 'Gilmore Girls',\n            'id': 3,\n            'img': 'http://cdn1.nflximg.net/webp/7451/11317451.webp'\n        }\n    ],\n    recommendations: [\n        {\n            'title': 'Family Guy',\n            'id': 4,\n            'img': 'http://cdn5.nflximg.net/webp/5815/2515815.webp'\n        },\n        {\n            'title': 'The Croods',\n            'id': 5,\n            'img': 'http://cdn3.nflximg.net/webp/2353/3862353.webp'\n        },\n        {\n            'title': 'Friends',\n            'id': 6,\n            'img': 'http://cdn0.nflximg.net/webp/3200/9163200.webp'\n        }\n    ]\n};\n\nexport const removeMyList = { type: \"REMOVE\", id: \"\" };\nexport const addMyList = { type: \"ADD\", id: \"\" }\n\n// export function applyPromoCode(promo) {\n\n//   return (dispatch) => {\n//     console.log(promo);\n//     //dispatch(tenPercentOFF());\n//   };\n// }\n\n// function tenPercentOFF() {\n//   return {\n//     type: \"10%OFF\"\n//   };\n// }\n\nconst reducer = (state = InitState, action) => {\n    console.log(\"action: \" + action.type);\n    console.log(action);\n    switch (action.type) {\n        case \"REMOVE\": {\n            let newList = state.mylist.filter(x => x.id !== action.id);\n            console.log(newList);\n            return {\n                ...state,\n                mylist: newList\n            }\n        };\n        case \"ADD\": {\n            let addItem = state.recommendations.filter(x => x.id === action.id);\n            let newList = [...state.mylist,...addItem];\n            let newRecommendations = state.recommendations.filter(x => x.id !== action.id);\n            return {\n                ...state,\n                recommendations: newRecommendations,\n                mylist: newList\n            }\n        };\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { removeMyList, addMyList } from './reducer.js';\nimport { connect } from \"react-redux\";\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  handleRemove = (e) => {\n    console.log(e.target.id);\n    this.props.removeMyList(parseInt(e.target.id));\n  }\n\n  handleAdd = (e) => {\n    this.props.addMyList(parseInt(e.target.id));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2 className=\"title\">Mylist</h2>\n        <ul className=\"container\">\n\n          {this.props.mylist.map(ele => {\n            return (\n              <li className=\"list\">\n                <span >{ele.title}</span>\n                <span className=\"overlay\"></span>\n                <img src={ele.img} className=\"image\" />\n                <button className=\"button\" id={ele.id} onClick={this.handleRemove}> Remove </button>\n              </li>\n            )\n          })}\n        </ul>\n        <h2 className=\"title\">Recommendations </h2>\n        <ul className=\"container\">\n\n          {this.props.recommendations.map(ele => {\n            return (\n              <li className=\"list\">\n                <span >{ele.title}</span>\n                <span className=\"overlay\"></span>\n                <img src={ele.img} className=\"image\" />\n                <button className=\"button\" id = {ele.id} onClick={this.handleAdd}> ADD </button>\n              </li>\n            )\n          })}\n        </ul>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    mylist: state.mylist,\n    recommendations: state.recommendations\n  };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    removeMyList: (id) => { removeMyList.id = id; dispatch(removeMyList); },\n    addMyList: (id) => { addMyList.id = id; dispatch(addMyList); }\n  };\n};\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reducer from \"./reducer.js\";\nimport { createStore } from \"redux\";\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}