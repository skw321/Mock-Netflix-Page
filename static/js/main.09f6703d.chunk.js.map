{"version":3,"sources":["reducer.js","Components/MoviePanel.js","App.js","serviceWorker.js","index.js"],"names":["InitState","mylist","recommendations","isLoading","hasError","removeMyList","type","id","addMyList","store","createStore","state","arguments","length","undefined","action","console","log","Object","objectSpread","newList","data","movies","newRecommendations","errorPage","filter","x","addRecommendationsItem","concat","toConsumableArray","addItem","applyMiddleware","thunk","MoviePanel","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleRemove","e","target","parseInt","handleAdd","_this2","onClick","list","title","react_default","a","createElement","className","map","ele","src","img","button","Component","connect","dispatch","App","fetchMovies","src_Components_MoviePanel","values","keys","url","page","axios","get","then","response","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09f6703d.chunk.js","sourcesContent":["import axios from 'axios';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst InitState = {\n    mylist: [],\n    recommendations: [],\n    isLoading: false,\n    hasError: false\n};\n\nexport const removeMyList = { type: \"REMOVE\", id: \"\" };\nexport const addMyList = { type: \"ADD\", id: \"\" }\n\nexport function fetchMovies(url, page) {\n    return (dispatch) => {\n        dispatch(loadPage());\n        axios.get(url, page)\n            .then((response) => {\n                dispatch(saveMovies(response.data));\n            })\n            .catch((err) => {\n                dispatch(errorPage(err));\n            })\n    }\n}\n\nfunction loadPage() {\n    return {\n        type: \"LOAD_PAGE\",\n    }\n}\n\nfunction errorPage(err){\n    return {\n        type: \"ERROR_PAGE\"\n    }\n}\n\nfunction saveMovies(data){\n    return {\n        type: \"SAVE_MOVIES\",\n        data: data\n    }\n}\n\nconst reducer = (state = InitState, action) => {\n    console.log(\"action: \" + action.type);\n    console.log(action);\n    switch (action.type) {\n        case \"LOAD_PAGE\":{\n            return {\n                ...state,\n                isLoading: true\n            }\n        }\n        case \"ERROR_PAGE\":{\n            return{\n                ...state,\n                isLoading: false,\n                hasError: true\n            }\n        }\n        case \"SAVE_MOVIES\":{\n            let newList = action.data.movies.mylist;\n            console.log(newList);\n            let newRecommendations = action.data.movies.recommendations;\n            console.log(newRecommendations);\n            return{\n                ...state,\n                isLoading: false,\n                errorPage: false,\n                mylist: newList,\n                recommendations: newRecommendations\n            }\n        }\n        case \"REMOVE\": {\n            let newList = state.mylist.filter(x => x.id !== action.id);\n            let addRecommendationsItem = state.mylist.filter(x => x.id === action.id);\n            let newRecommendations = [...state.recommendations, ...addRecommendationsItem];\n            console.log(newList);\n            return {\n                ...state,\n                mylist: newList,\n                recommendations: newRecommendations\n            }\n        };\n        case \"ADD\": {\n            let addItem = state.recommendations.filter(x => x.id === action.id);\n            let newList = [...state.mylist, ...addItem];\n            let newRecommendations = state.recommendations.filter(x => x.id !== action.id);\n            return {\n                ...state,\n                recommendations: newRecommendations,\n                mylist: newList\n            }\n        };\n\n        default:\n            return state;\n    }\n};\nconst store = createStore(reducer, InitState, applyMiddleware(thunk));\nexport default store;\n","import React, { Component } from 'react';\nimport './MoviePanel.css';\nimport { removeMyList, addMyList } from '../reducer';\nimport { connect } from \"react-redux\";\n\nclass MoviePanel extends Component {\n  constructor(props) {\n    super(props);\n\n  }\n\n  handleRemove = (e) => {\n    console.log(e.target.id);\n    this.props.removeMyList(parseInt(e.target.id));\n  }\n\n  handleAdd = (e) => {\n    this.props.addMyList(parseInt(e.target.id));\n    console.log(\"add\");\n  }\n\n  render() {\n\n    let onClick = { mylist: this.handleRemove, recommendations: this.handleAdd };\n    console.log(this.props.list);\n    console.log(this.props.title);\n    return (\n     \n\n      <div className=\"inner\">\n         <h2 className=\"title\">{this.props.title}</h2>\n        <ul className=\"container\">\n       \n          {this.props.list.map(ele => {\n            return (\n              <li className=\"list\">\n                <span className=\"overlay\"></span>\n                <img src={ele.img} className=\"image\" />\n                <span >{ele.title}</span>\n                <button className=\"button\"\n                  id={ele.id}\n                  onClick={onClick[this.props.title]}> {this.props.button} </button>\n              </li>\n            )\n          })}\n        </ul>\n\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n  };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    removeMyList: (id) => { removeMyList.id = id; dispatch(removeMyList); },\n    addMyList: (id) => { addMyList.id = id; dispatch(addMyList); },\n  };\n};\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MoviePanel);\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from \"react-redux\";\nimport MoviePanel from './Components//MoviePanel';\nimport { fetchMovies } from './reducer';\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount\");\n    this.props.fetchMovies(\"http://localhost:8888/movies\");\n  }\n\n\n  render() {\n\n\n    if (this.props.isLoading === true) {\n      return (\n        <h2>The page is loading...</h2>\n      )\n    }\n    if (this.props.hasError === true) {\n      return (\n        <h2>Sorry. Unable to reach server...</h2>\n      )\n    }\n\n    let movies = [{ mylist: this.props.mylist }, { recommendations: this.props.recommendations }];\n    console.log(movies);\n    let button = { mylist: \"REMOVE\", recommendations: \"ADD\" };\n    return (\n      <div >\n        <ul className=\"outtercontainer\">\n          {movies.map(list => {\n            return (\n              <li className=\"outterlist\">\n                <MoviePanel\n                  list={Object.values(list)[0]}\n                  title={Object.keys(list)[0]}\n                  button={button[Object.keys(list)[0]]}\n                />\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    mylist: state.mylist,\n    recommendations: state.recommendations,\n    isLoading: state.isLoading,\n    hasError: state.hasError\n  };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMovies: (url) => { dispatch(fetchMovies(url)); }\n  };\n};\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './reducer'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}